import logging
from decimal import Decimal

from rest_framework import generics, permissions

from django.contrib.auth.mixins import LoginRequiredMixin
from django.db.models import Q
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse_lazy
from django.utils.dateparse import parse_date
from django.views.generic import CreateView, DeleteView, DetailView, ListView, UpdateView

from .forms import CategoryForm, TableForm, TransactionForm
from .models import Table, Transaction
from .serializers import TransactionSerializer
from .utils import get_exchange_rates

logger = logging.getLogger(__name__)


class TableListView(LoginRequiredMixin, ListView):
    model = Table
    template_name = 'finances/table_list.html'
    context_object_name = 'tables'

    def get_queryset(self):
        return Table.objects.filter(user=self.request.user)


class TableDetailView(LoginRequiredMixin, DetailView):
    model = Table
    template_name = 'finances/table_detail.html'
    context_object_name = 'table'

    def get_queryset(self):
        return Table.objects.filter(user=self.request.user)  # –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–æ —Å–≤–æ—ó—Ö —Ç–∞–±–ª–∏—Ü—å

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ
        transactions = self.object.transactions.all()

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Å—É–º—ñ
        min_amount = self.request.GET.get("min_amount")
        max_amount = self.request.GET.get("max_amount")
        if min_amount:
            transactions = transactions.filter(amount__gte=min_amount)
        if max_amount:
            transactions = transactions.filter(amount__lte=max_amount)
        context["transactions"] = transactions
        return context


def table_detail(request, table_id):
    table = get_object_or_404(Table, id=table_id, user=request.user)  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–∞–±–ª–∏—Ü—é
    transactions = table.transactions.all()  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ

    return render(request, "finances/table_detail.html", {
        "table": table,
        "transactions": transactions
    })


class TableCreateView(LoginRequiredMixin, CreateView):
    model = Table
    form_class = TableForm
    template_name = 'finances/table_form.html'
    success_url = reverse_lazy('table_list')

    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)


class TableUpdateView(LoginRequiredMixin, UpdateView):
    model = Table
    form_class = TableForm
    template_name = 'finances/table_form.html'
    success_url = reverse_lazy('table_list')


class TableDeleteView(LoginRequiredMixin, DeleteView):
    model = Table
    template_name = 'finances/table_confirm_delete.html'
    success_url = reverse_lazy('table_list')


def add_category(request):
    if request.method == "POST":
        form = CategoryForm(request.POST)
        if form.is_valid():
            category = form.save(commit=False)
            category.user = request.user  # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            category.save()
            return redirect('some_view')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    else:
        form = CategoryForm(user=request.user)

    return render(request, 'finances/add_category.html', {'form': form})


class TransactionListView(LoginRequiredMixin, ListView):
    model = Transaction
    template_name = "finances/transaction_list.html"
    context_object_name = "transactions"

    def get_queryset(self):
        """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö GET."""
        queryset = Transaction.objects.filter(table__user=self.request.user)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        search_query = self.request.GET.get("search", "").strip()
        min_amount = self.request.GET.get("min_amount")
        max_amount = self.request.GET.get("max_amount")
        start_date = self.request.GET.get("start_date")
        end_date = self.request.GET.get("end_date")

        logger.debug(
            f"–§—ñ–ª—å—Ç—Ä: search={search_query}, min={min_amount}, max={max_amount}, start={start_date}, end={end_date}"
        )
        # –§—ñ–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
        if search_query:
            queryset = queryset.filter(Q(table__name__icontains=search_query))

        # –§—ñ–ª—å—Ç—Ä –ø–æ —Å—É–º—ñ
        if min_amount:
            try:
                min_amount = Decimal(min_amount)
                queryset = queryset.filter(amount__gte=min_amount)
            except ValueError:
                logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è min_amount")

        if max_amount:
            try:
                max_amount = Decimal(max_amount)
                queryset = queryset.filter(amount__lte=max_amount)
            except ValueError:
                logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è max_amount")

        # –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ
        if start_date:
            parsed_start_date = parse_date(start_date)
            if parsed_start_date:
                queryset = queryset.filter(date__gte=parsed_start_date)
            else:
                logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ start_date")

        if end_date:
            parsed_end_date = parse_date(end_date)
            if parsed_end_date:
                queryset = queryset.filter(date__lte=parsed_end_date)
            else:
                logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ end_date")

        logger.debug(f"–í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: {queryset}")
        return queryset

    def get_context_data(self, **kwargs):
        """–î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤–∞–ª—é—Ç."""
        context = super().get_context_data(**kwargs)
        transactions = context["transactions"]

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç
        exchange_rates = get_exchange_rates()

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤ —Ä—ñ–∑–Ω–∏—Ö –≤–∞–ª—é—Ç–∞—Ö
        total_amounts = {}
        total_uah = Decimal("0.0")

        for transaction in transactions:
            currency = transaction.currency
            amount = transaction.amount

            if currency not in total_amounts:
                total_amounts[currency] = Decimal("0.0")

            total_amounts[currency] += amount

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É –≥—Ä–∏–≤–Ω—ñ
            if currency in exchange_rates and "UAH" in exchange_rates:
                total_uah += (amount / Decimal(exchange_rates[currency])) * Decimal(exchange_rates["UAH"])

        context["total_amounts"] = total_amounts
        context["total_uah"] = total_uah
        context["exchange_rates"] = exchange_rates

        logger.debug(f"üìä –ó–∞–≥–∞–ª—å–Ω—ñ —Å—É–º–∏: {total_amounts}, –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤ UAH: {total_uah}")

        return context


class TransactionCreateView(LoginRequiredMixin, CreateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'finances/transaction_form.html'

    def get_success_url(self):
        return reverse_lazy('transaction_list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['tables'] = Table.objects.filter(user=self.request.user)
        return context

    def form_valid(self, form):
        form.instance.user = self.request.user
        return super().form_valid(form)

    def get_form_kwargs(self):
        """–ü–µ—Ä–µ–¥–∞—î–º–æ `user` —É —Ñ–æ—Ä–º—É, —â–æ–± –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs


class TransactionUpdateView(LoginRequiredMixin, UpdateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'finances/transaction_form.html'
    success_url = reverse_lazy('transaction_list')


class TransactionDeleteView(LoginRequiredMixin, DeleteView):
    model = Transaction
    template_name = 'finances/transaction_confirm_delete.html'
    success_url = reverse_lazy('transaction_list')


class TransactionListCreateView(generics.ListCreateAPIView):
    serializer_class = TransactionSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Transaction.objects.filter(table__user=self.request.user).prefetch_related("categories")


class TransactionDetailView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = TransactionSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Transaction.objects.filter(table__user=self.request.user)
